maria db----------------------------------------------


create database django_ex_db;

show databases;

CREATE USER 'webuser'@'%' IDENTIFIED BY '1234';

GRANT ALL PRIVILEGES ON django_ex_db.* TO 'webuser'@'%';


pycharm---------------------------------------------------

환경 바뀔 때마다 설치 다시 해주어야 함

pip install django
pip install mysqlclient
pip install django mysqlclient
django-admin startproject mysite


pip install httpie
http간 메시지 어떻게 받고 응답하나 알 수 있다
ex)
http -v GET 127.0.0.1:8000/bookmark/
겟 메소드로 이 url을 요청하는 것, -v는 모든 걸 추출하라


manage.py를 webapp1로 옮김
나머지 파일은 상위 mysite로 옮김, 빈 mysite는 삭제

python manage.py runserver  // 서버 기동시켜라!

url 누름, 런서버를 한 상태로 실행시켜라

manage.py에서 execute_from_command_line(sys.argv)는 커맨드라인에서 들여온 문자열을 말함

settings.py에서
BASE_DIR 현재 경로 위치를 패키지에 포함
webapp1이 현재 디렉토리, mysite 포함 안 됨, 그것도 포함하게 해라~

실행 파일이 있는 디렉토리의 절대경로를 구할 때에는 흔히 다음과 같이 사용한다.
os.path.dirname(os.path.abspath('__file__'))


SECRET_KEY는 보안

ALLOWED_HOSTS 웹서버의 호스트, 어떤 웹 서버한테만 지원할 거냐
비어있으면 다 지원할 거다

INSTALLED_APPS = [
    'django.contrib.admin', 관리
    'django.contrib.auth', 인증
    'django.contrib.contenttypes',
    'django.contrib.sessions', 로그인에서로그아웃까지관리
    'django.contrib.messages',
    'django.contrib.staticfiles',
]********** 중요
기능 하나하나 추가할 건데, 그걸 장고앱이라고 부를 거임
그때 여기에 등록을 해줘야 함, 만들 때마다

ROOT_URLCONF ***** 중요, url 패턴을 어떻게 운영할 거냐, 계층화시킬 거임, 한 개에 몰빵 아니라
부모자식관계를 맺을 거임!
맨꼭대기 루트가 누구냐 => mysite.urls 
이름 왜 mysite.urls??
모듈을 모아둔 디렉토리 => 패키지 **********************
패키지엔  __init__.py 필요, 비워두면 이 디렉토리 파일 몽땅 다 공개하겠다
즉 __init__.py 있으니 mysite는 패키지, 안에 있는 것들은 모듈
import mysite.모듈이름
mysite 패키지 안에 있는 urls모듈! 임포트해서 url 패턴 정보를 읽기 시작해라
나중에 계층화시킬 거임

urlpatterns에 등록된 url 이외가 있으면 404에러 난다

디비 pdf에 있는 걸로 바꿔주기

DATABASES = {
'default': {
'ENGINE': 'django.db.backends.mysql',
'NAME': 'django_ex_db', # 데이터베이스 명
'HOST': 'localhost', # 서버 IP
'PORT': '3306', # 포트번호
'USER': 'webuser', # 사용자 ID
'PASSWORD': '1234' # 비밀번호
}
}
LANGUAGE_CODE = 'ko'
TIME_ZONE = 'Asia/Seoul'
USE_TZ = False
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

http://127.0.0.1:8000/admin
으로 들어가면 확인!! 웹브라우저에 요청

ctrl+c 서버 종료

python manage.py migrate
-> 마리아 열어서 django_ex_db 확인해보면 테이블들 생겼음
현재 가지고 있는 모델을 데베에 반영하는 개중요*********한 명령어

webuser 마리아에서 신규 만들어서 열기

로그인 메카니즘 넣으려면 장고이엑스디비 안의 auth_user 건들이면 된다, 유저테이블이라 생각

파이썬으로 관리자 생성
>python manage.py createsuperuser
사용자 이름 (leave blank to use 'i'): admin
이메일 주소: wja1511@naver.com
Password:1234
Password (again):1234
비밀번호가 너무 짧습니다. 최소 8 문자를 포함해야 합니다.
비밀번호가 너무 일상적인 단어입니다.
비밀번호가 전부 숫자로 되어 있습니다.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.

마리아로
auth_user 데이터 봐라 생김

파이썬으로
python manage.py runserver
쳐서 들어가서 /admin으로 들어가서 로그인하면 된당!!

python manage.py startapp bookmark
북마크라는 어플 만들 거임
장고가 북마크 앱 디렉터리와 그 하위에 필요한 파일들을 생성


북마크가 패키지, 밑에 있는 애들 모듈  bookmark.모듈이름
migrations도 패키지, __init__있으니까
패키지 안에 패키지 있는 것

http://127.0.0.1:8000/bookmark 
아직은 에러 ㅠㅠ -> 이 url을 아직 등록 안 함
url 치고 정보달라는 다 get

url 관리 파일은 urls.py

apps.py 들어가서 확인 북마크 생겼음

settings.py로 와서 
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookmark.apps.BookmarkConfig', # 추가
]
settings.py 파일에 프로젝트에 포함되는 애플리케이션들을 지정 (애플리케이션의 설정 클래스로 등록)
INSTALLED_APPS = […,’bookmark.apps.BookmarkConfig’, # 추가]
저 경로 따라들어가면 이 이름 나옴

models.py 들어가서 수정

from django.db import models
# 모델클래스 정의
class Bookmark(models.Model): # 장고의 모델 클래스 상속받겠다
    # 생성자 정의 안 했는데? 그럼 디폴트 생성자 쓰겠다~
    # self. 어쩌구 없음.. 
    title = models.CharField('TITLE', max_length=100, blank=True) # 클래스 변수, 클래스 당 하나!
    # char 쓸 때는 max_length 필수!
    #컬럼이름 = 타입 (사람을 위한 정의.. 공백 허용할 거냐(sql용어 null) false면 not null)
    url = models.URLField('URL', unique=True)  # 모든 인스턴스가 공유해서 쓰는 것, cls.뭐뭐 이렇게 접근
    # 인스턴스의 정보가 아니라 클래스 차원에서 관리하는 정보
    # 테이블의 컬럼과 매칭되는 것
    # unique -> 중복허용하지 않겠다

    # 프라이머리키 지정 안 하면 자동으로 id integer auto_increment primary key가 자동으로 들어감
    # 그래서 총 세 개 만들어짐 title url id

    # create table Bookmark(
    # title varchar(100) null,
    # url varchar(...) unique); 이 문장을 위처럼 표기한 것
    def __str__(self):
        return self.title




실제 클래스 명은 앱명칭_클래스명s => bookmark_bookmarks


bookmark의 admin.py 들어간다, 수정

from django.contrib import admin
# Register your models here.
from bookmark.models import Bookmark

@admin.register(Bookmark)  # 이 클래스의 모델로 Bookmark를 쓴다
class BookmarkAdmin(admin.ModelAdmin):
    list_display = ('id', 'title', 'url') # 사이트에서 출력할 컬럼 목록
    # 뭘 보여줄 거냐~ 이 세개의 컬럼 보여주겠다

모델을 지금까지 만든 것!!!!!
데베에 반영하지 않았음

python manage.py makemigrations bookmark
하고 migrations 폴더 열면 파일 생김, sql 만들 수 있는 정보파일 생김

python manage.py migrate
실제 데베에 반영하는 명령어!!!!!!!!!
실행하고 데베 들어가면 bookmark_bookmark 생김

python manage.py makemigrations // 모델 변경사항 리스트 만들기
python manage.py migrate        // 모델 변경사항 적용


models.py 클래스가 중심!! 어떤 모델 운영할 것이냐
우린 sql문 안 쓰고 클래스로 정의했음 -> ORM(object relationship model)
데베와 관련된 것을 객체로 정의해서 사용하겠다!
우리가 직접적으로 sql문 만들어서 사용할 일 없다

지금까지!!!!
프로젝트 -> 어플리케이션 만들기(startapp) -> 어플리케이션 세팅스파일에 등록 -> 모델만들기(어떤 데이터 운영할 거냐)
 -> 어드민에 등록 ->테이블 실제로 만들어주고

어드민으로 다시 들어가서 보면 북마크 어플과 북마크스 모델 생김
북마크에 추가하면 추가되고 데베로 들어가면 데이터 등록되어 있음

from django.contrib import admin
# Register your models here.
from bookmark.models import Bookmark

@admin.register(Bookmark)  # 이 클래스의 모델로 Bookmark를 쓴다
class BookmarkAdmin(admin.ModelAdmin):
    list_display = ('id', 'title', 'url')
이 작업 때문에 보이는 것, 컬럼의 얘네들이 나오는 것
('id', 'title', 'url') 튜플에 저장된 컬럼들이 나오는 것

python manage.py shell -> 파이썬 쉘로 들어옴
그냥 파이썬 치고 들어왔을 때랑 다름, 세팅스가 적용된 파이썬 쉘로 들어온 거임
>>>from bookmark.models import Bookmark
	=> class Bookmark임포트한 거임
>>>marks = Bookmark.objects.all()
	=> where절 없이 셀렉트하는 오브젝츠올
	=> objects라는 애, 인스턴스변수가 아니라 클래스변수! 지금 우리에겐 없음, 부모클래스에서 정의해놓은 것
	=> 파이썬 가지고 연동할 때 레파지토리? 역할
	=> all()이라는 메서드 있음
>>>marks
	=>marks 확인
	=> manage에서 넣었던 만큼 엘리먼트 있을 것
>>>for m in marks:
	print(m.id, m.title, m.url)
	=> 루프 돌려 확인
>>>type(marks[0])
	=> bookmark.models.Bookmark 북마크의 인스턴스
	=> 북마크 인스턴스 만들어낸 것
	=> 헷갈리는 거 m.id, m.title, m.url랑
	title = models.CharField('TITLE', max_length=100, blank=True) # 클래스 변수, 클래스 당 하나!
   	 url = models.URLField('URL', unique=True) 이거는 다름
	self. ?
	성격이 다름, 아래는 클래스변수
	m.id 얘네는 실제 행의 값을 저장하기 위한 인스턴스 변수
>>>mark = Bookmark.objects.get(id=1)
>>>mark
	=> id = 1인 거 하나 리턴해달라!
	=> 겟은 하나, 올은 전부 리턴
>>>mark.id, mark.title, mark.url
	=> 전부 보려고 튜플로 찍어봄
>>>m1 = Bookmark(title='다음', url='https://www.daum.net')
	=> 북마크의 인스턴스 만들겠다!
	=> 파이썬 객체를 하나 만든 것
>>>m1.save()
	=> 세이브 넣으면 인서트된다
>>>m1.id, m1.title, m1.url
>>>m2 = Bookmark(title='모바일 다음', url='https://m.daum.net')
>>>m2.id, m2.title, m2.url
	=> 세이브하기 전에 보기, 아이디 넌으로 나옴, 데베 저장되기 전이다, 아이디는 데베저장하고 생김
>>>m2.save()
>>>m2.id, m2.title, m2.url
	=>세이브하니까 아이디 인서트된다!
	=> 모델클래스의 인스턴스 하나는 클래스의 한 행을 나타낸다, 데베 저장되기 전엔 아이디 없다가, 세이브 생김
>>>m2.title = 'mobile daum'
	=> 변수 수정!! sql의 update보다 간단
>>>m2.save()
	=> id 값을 보는 것, id가 넌이면 인서트, 값이 있으면 업데이트를 하는 것
>>>m2.delete()
	=>m2 데베에서 지우고 싶다
	=>(1, {'bookmark.Bookmark': 1})  1행이 삭제됐고, 중괄호 안엔 삭제된 애
>>>m2.id, m2.title, m2.url
	=> 삭제 후 아이디는 사라짐 다른 건 있는데
	=> 아이디 없다 -> 즉 데베에 없다!!!!
	=> 세이브 딜리트 이런 것 부모클래스에 정의되어 있음, 상속으로 쓰는 것


파이썬으로 돌아가서 views.py 수정
from django.shortcuts import render

# Create your views here.
from django.views.generic import ListView, DetailView
# 부모클래스로 리스트뷰(목록보겠다)랑 디테일뷰(한 개를 자세히 보겠다)
from bookmark.models import Bookmark

class BookmarkLV(ListView):
    model = Bookmark  # 클래스변수 self.아님
    #이 뷰가 사용할 모델이 뭐냐? 북마크 사용할 거임
    
class BookmarkDV(DetailView):  # BookmarkDV는 디테일뷰의 닉네임
    model = Bookmark
이렇게

>>>Bookmark.objects.all()
	=> 내가 사용할 모델이 뭐냐고 오브젝츠 왼쪽에 알려줘야 함
	=> 그 정보를 설정하는 게 model = Bookmark 이거 즉 내부에선 medel.objects.all()
	=> all 한 걸 object_list에 저장해서 템플릿에 넘김
	=> 디테일뷰는 get()으로!! 하나씩 자세히니까
	=> get한 걸 object에 저장해서 템플릿에 넘김
	=>○ ListView
	▪ templates/<앱명칭>/모델명_list.html
	○ DetailView
	▪ templates/<앱명칭>/모델명_detail.html
	=>우리 모델 앱 다 북마크.. 북마크 넣으면 된다

템플릿!!!!! 
그때그때 달라지는 걸 동적페이지 (내용이 달라진다)
항상 똑같은 거 긁음, 정적페이지

bookmark/templates/bookmark/bookmark_list.html
위치에 파일 만들고 bookmark_list.html수정

    <div>
        <h1>Bookmark List</h1>
            <ul>
                {% for bookmark in object_list %}
<!--                이건 html이 아니다~ {}-->
<!--                object_list라는 변수-->
<!--                all한 결과가 object_list에 담겨져 있어서 루프 몇 번 돌지 정함..-->
<!--                5개 있음 뭐 5번 돌겠지-->
                <li>
                    <a href="{% url 'detail' bookmark.id %}">{{bookmark}}</a>
<!--                    {{}}이걸 변수로 해서 이 값을 출력한다, print()와 같음-->
                </li>
                {% endfor %}
            </ul>
    </div>


렌더링한다... -> 만들어야 할 기본 형태는 있는데 주변 요소에 따라서 변함, 주변 요소 정하고 실제로 어떻게 움직이는지 정함
이 개념 똑같음.. 기본 골격 있고 팩터에 따라서 값을 결정해내는 것
object_list에 따라서 값을 결정지음, 렌더링한다~~~~~~~
이 최종 결과가 브라우저로 전송되는 것!
전송되기 전에 값이 다 바뀌어 있는 것

같은 폴더 아래, bookmark_detail.html

    <div>
        <h1>Bookmark List</h1>
    <div>
        <h1>{{object.title}}</h1>
    <ul>
        <li>URL : <a href="{{object.url}}">{{object.url}}</a></li>
    </ul>
    </div>
    </div>


mysite/urls.py 들어가서
수정

from django.contrib import admin
from django.urls import path
from bookmark.views import BookmarkLV, BookmarkDV

urlpatterns = [
    path('admin/', admin.site.urls),

    # class-based views
    # http//127.0.0.1:8000/bookmark이거 하면 리스트뷰에게 처리해!
    # model.object.all()해서 리턴받는다!
    # 그 목록을 컨텍스트 변수 object_list에 담아서 렌더링......
    # 만들어졌으면 브라우저에게 보냄 

    path('bookmark/', BookmarkLV.as_view(), name='index'),

    #사용할 url, 이 url을 처리할 뷰가 누구냐

    path('bookmark/<int:pk>', BookmarkDV.as_view(), name='detail'),

    # bookmark/보고 싶은 북마크의 아이디값(매번 바뀌는 값) 어떤 의미로 변수
    # path 속 변수라고 해서 (path variable)경로변수라고 불림.... /book/id
    # <>표기를 꺽세로.. <>만나면 경로변수다!! :을 기준으로 왼이 데이터 타입
    # 북마크 모델의 아이디타입이 인트!
    # : 오른쪽은 pk (프라이머리키) ****************중요 **************** 바꿀 수 없음
    # 꺼낼 정보 어디에 담겨있냐 <int:pk>로 들어감.... get(id=)이 값이!!
]

view-source:http://127.0.0.1:8000/bookmark/
확인하면 나온다 

오른쪽 마우스 눌러서 소스보기

<a href="/bookmark/2">네이버</a>
path('bookmark/<int:pk>', BookmarkDV.as_view(), name='detail'),
비교해보기!!!!!!!
object = model.objects.get(id=pk)를 실행하는 것
object가 컨텍스트변수로 되어서 템플릿에 넘어가는 것

bookmark/{{bookmark.id}}하면 쉽지만 사이트 개편으로 북마크 즉 앞부분도 달라질 수 있다

이걸 쓰지 말고
name='index'
name='detail'
이 이름으로 역으로 'bookmark/'를 프로그램으로 만들어내자!!!!!!!!
url 개편 일어나더라도 수작업을 최소화하자

{% url 'detail' bookmark.id %}
url 유알엘 만들어내라 명령어
'detail' -> view의 이름,view name
path('bookmark/<int:pk>', BookmarkDV.as_view(), name='detail'),
url에 들어갈 게 bookmark/<int:pk>
변수 하나 있음, <int:pk>와 bookmark.id가 매칭되는 것

url 바뀌면 path('bookmark/<int:pk>', BookmarkDV.as_view(), name='detail'), 앞 바꾸면 된다
하나만 바꾸면 된다

목록으로 돌아가기!!!!
<li>목록으로 돌아가기 : <a href="{%url 'index'%}">목록</a></li>

<li>URL : <a href="{{object.url}}" target="_blank">{{object.url}}</a></li>
target="_blank" =====> 이게 새창에 띄우기!!!!!!!!!!!!!!

---------------------------------------------------------------------------------------------------


함수 기반 만들어보기~~~~~~~~~~~~~~~
내가 하고 싶은 걸로 골라서 하면 된다!

# class BookmarkLV(ListView):
#     model = Bookmark  # 클래스변수 self.아님
#     #이 뷰가 사용할 모델이 뭐냐? 북마크 사용할 거임
#     
# class BookmarkDV(DetailView):  # BookmarkDV는 디테일뷰의 닉네임
#     model = Bookmark

주석처리하고

밑에

def index(request):
    #request 웹브라우저가 전송한 것이 담겨있음
    # request로 어떤 내용이 전달됐나도 확인할 수 있음
    object_list = Bookmark.objects.all()
    print(object_list)
    # 콘솔에 한 번 출력해보겠다
    context = {'object_list': object_list}
    # 사전 하나 만들 것, 이름은 컨텍스트 오브젝트리스트라는 키로 오브젝트리스트 조회
    return render(request, 'bookmark/bookmark_list.html', context)

    # 두 번째 인자가 템플릿 경로, 템플릿츠 디렉토리는 고정! 그 밑에 북마크 밑에 북리스트.html
    # 이 파일로 템플릿 쓰겠다
    # 컨텍스트에 사전 전달하면 렌더가 변수명과 변수값을 바꾸어서 지정해줌
    # 이렇게 넘어갔기 때문에 html에서 object_list로 루프 돌리는 것

    #path variable의 이름과 같아야 함, 두 번째 인자
def detail(request, pk):
    object = Bookmark.objects.get(pk=pk)   # .get(id=pk)
    context = {'object': object}
    return render(request, 'bookmark/bookmark_detail.html', context)

쓰기!!!!!!


urls.py 들어가기!!------------------------------------------------------

    # from bookmark.views import BookmarkLV, BookmarkDV
    # path('bookmark/', BookmarkLV.as_view(), name='index'),
    # path('bookmark/<int:pk>', BookmarkDV.as_view(), name='detail'),

주석처리!!!


	from bookmark.views import index, detail
  	  path('bookmark/', index, name='index'),
   	 path('bookmark/<int:pk>', detail, name='detail'),

추가!!!!


view에서 objects를 bookmark로 바꿈
    context = {'bookmark_list': object_list}
    context = {'bookmark': object}

그러면 어딜 바꿔야 하냐? .html을 바꿔야 함

objects 있는 거 bookmark로

하지만 우린 클래스 기반 쓸 거임^^


views.py 들어가서

class BookmarkLV(ListView):
    model = Bookmark  # 클래스변수 self.아님
    #이 뷰가 사용할 모델이 뭐냐? 북마크 사용할 거임
    context_object_name = 'bookmark_list'

class BookmarkDV(DetailView):  # BookmarkDV는 디테일뷰의 닉네임
    model = Bookmark
    context_object_name = 'bookmark'

컨텍스트 오브젝트 이름 바꿈

urls.py 들어가서 함수기반 임포트, 함수기반 뷰 주석처리하고 클래스 기반 임포트, 클래스기반 뷰 활성화


-------------------------------------------------------------------------------------------

장고 어떻게 기동되냐

커넥션 일어남, 브라우저에 주소 넣고 엔터칠 때
커넥션 되면, 리퀘스트를 url 정보 추출해서 http request 보냄
서버가 이 문장을 받았을 때 메서드하고 url을 받는다
get이면 list view or detail
url에 아이디 있으면 디테일 없으면 리스트뷰
   path('bookmark/', BookmarkLV.as_view(), name='index'),
    path('bookmark/<int:pk>', BookmarkDV.as_view(), name='detail'),
장고는 urls.py의 여길 봄
url을 담당하는 뷰가 누구냐를 BookmarkLV.as_view()에서 찾아냄(두 번째 인자)
찾아졌다면 처리, 없으면 404에러!
view함수도 이제 호출!!!! 
함수기반 보면 이해 쉽다
리퀘스트 객체가 전달된다, 요청에 따른 것을 준비
목록에 들어갈 사전의 키가 렌더링할 때 변수로..
사전은 갯수 제한 없음
뷰의 역할은 데이터를 준비하고 렌더링 호출!!
렌더함수가 html 탬플릿과 context(사전)을 기반으로 동적으로 내용 만들어내는 것

이제 탬플릿 html 파일들 봐라

코드 규칙대로 html 문자열들로 만들어내는 것
만들어진 녀석들은 뷰의 렌더의 리턴값으로 간다
그게 리스폰스의 객체로 담겨서 감

요청이 오면 urls.py를 뒤져서 뷰를 찾고
리퀘스트의 url찾아서 뷰를 찾고 뷰를 호출
뷰는 데이터 준비하고 템플릿을 렌더링한 결과를 브라우저로 응답함

부모로 쓰고 있는 뷰는 django.views.generic에 있음
그래서 통틀어서 제너릭뷰
어쩌구 뷰는 다 여기에 있음
